import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { Calendar, Menu, X } from "lucide-react";
import { Button } from "@/components/ui/button";
import { ThemeToggle } from "@/components/ui/theme-toggle";
import { useAuth } from "@/context/AuthContext"; // Fixed path (removed ./)
import { toast } from "sonner";

interface NavigationProps {
  currentView: string;
  setCurrentView(view: string): void;
}

export default function Navigation({ currentView, setCurrentView }: NavigationProps) {
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const { isAuthenticated, logout } = useAuth();
  const navigate = useNavigate();

  const handleLogout = async () => {
    try {
      await logout();
      navigate("/signin");
      setCurrentView("home");
      toast.success("Logged out successfully");
    } catch (error) {
      toast.error("Failed to log out");
      navigate("/signin"); // Redirect even on error
    }
  };

  const handleNavigation = (path: string, view: string) => {
    navigate(path);
    setCurrentView(view);
    setIsMenuOpen(false); // Close mobile menu
  };

  return (
    <nav className="bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 shadow-sm border-b border-border sticky top-0 z-50">
      <div className="container mx-auto px-4">
        <div className="flex items-center justify-between h-16">
          <div
            className="flex items-center space-x-2 cursor-pointer"
            onClick={() => handleNavigation("/", "home")}
          >
            <Calendar className="h-8 w-8 text-green-500" />
            <span className="text-xl font-bold text-foreground">EventMaster Pro</span>
          </div>

          {/* Desktop Menu */}
          <div className="hidden md:flex items-center space-x-8">
            <button
              onClick={() => handleNavigation("/", "home")}
              className={`text-foreground/70 hover:text-green-500 transition-colors ${
                currentView === "home" ? "text-green-500" : ""
              }`}
            >
              Home
            </button>
            <button
              onClick={() => handleNavigation("/#features", "features")}
              className={`text-foreground/70 hover:text-green-500 transition-colors ${
                currentView === "features" ? "text-green-500" : ""
              }`}
            >
              Features
            </button>
            <button
              onClick={() => handleNavigation("/dashboard", "dashboard")}
              className={`text-foreground/70 hover:text-green-500 transition-colors ${
                currentView === "dashboard" ? "text-green-500" : ""
              }`}
            >
              Dashboard
            </button>
            <button
              onClick={() => handleNavigation("/allevents", "allevents")}
              className={`text-foreground/70 hover:text-green-500 transition-colors ${
                currentView === "allevents" ? "text-green-500" : ""
              }`}
            >
              All Events
            </button>
            <button
              onClick={() => handleNavigation("/pricing", "pricing")}
              className={`text-foreground/70 hover:text-green-500 transition-colors ${
                currentView === "pricing" ? "text-green-500" : ""
              }`}
            >
              Pricing
            </button>
            <button
              onClick={() => handleNavigation("/contact", "contact")}
              className={`text-foreground/70 hover:text-green-500 transition-colors ${
                currentView === "contact" ? "text-green-500" : ""
              }`}
            >
              Contact
            </button>
          </div>

          {/* Desktop CTA Buttons */}
          <div className="hidden md:flex items-center space-x-4">
            <ThemeToggle />
            {isAuthenticated ? (
              <Button onClick={handleLogout} variant="outline" size="sm">
                Sign Out
              </Button>
            ) : (
              <>
                <Button
                  onClick={() => handleNavigation("/signin", "signin")}
                  variant="outline"
                  size="sm"
                >
                  Sign In
                </Button>
                <Button
                  onClick={() => handleNavigation("/signup", "signup")}
                  className="bg-blue-500 hover:bg-blue-600 text-white"
                >
                  Sign Up
                </Button>
              </>
            )}
          </div>

          {/* Mobile Menu Button */}
          <div className="md:hidden flex items-center space-x-2">
            <ThemeToggle />
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setIsMenuOpen(!isMenuOpen)}
            >
              {isMenuOpen ? <X className="h-6 w-6" /> : <Menu className="h-6 w-6" />}
            </Button>
          </div>
        </div>

        {/* Mobile Menu */}
        {isMenuOpen && (
          <div className="md:hidden py-4 space-y-4 border-t border-border">
            <button
              onClick={() => handleNavigation("/", "home")}
              className={`block text-foreground/70 hover:text-green-500 transition-colors ${
                currentView === "home" ? "text-green-500" : ""
              }`}
            >
              Home
            </button>
            <button
              onClick={() => handleNavigation("/#features", "features")}
              className={`block text-foreground/70 hover:text-green-500 transition-colors ${
                currentView === "features" ? "text-green-500" : ""
              }`}
            >
              Features
            </button>
            <button
              onClick={() => handleNavigation("/dashboard", "dashboard")}
              className={`block text-foreground/70 hover:text-green-500 transition-colors ${
                currentView === "dashboard" ? "text-green-500" : ""
              }`}
            >
              Dashboard
            </button>
            <button
              onClick={() => handleNavigation("/allevents", "allevents")}
              className={`block text-foreground/70 hover:text-green-500 transition-colors ${
                currentView === "allevents" ? "text-green-500" : ""
              }`}
            >
              All Events
            </button>
            <button
              onClick={() => handleNavigation("/pricing", "pricing")}
              className={`block text-foreground/70 hover:text-green-500 transition-colors ${
                currentView === "pricing" ? "text-green-500" : ""
              }`}
            >
              Pricing
            </button>
            <button
              onClick={() => handleNavigation("/contact", "contact")}
              className={`block text-foreground/70 hover:text-green-500 transition-colors ${
                currentView === "contact" ? "text-green-500" : ""
              }`}
            >
              Contact
            </button>
            <div className="pt-4 space-y-2">
              {isAuthenticated ? (
                <Button
                  onClick={handleLogout}
                  variant="outline"
                  className="w-full text-foreground"
                >
                  Sign Out
                </Button>
              ) : (
                <>
                  <Button
                    onClick={() => handleNavigation("/signin", "signin")}
                    variant="outline"
                    className="w-full text-foreground"
                  >
                    Sign In
                  </Button>
                  <Button
                    onClick={() => handleNavigation("/signup", "signup")}
                    className="w-full bg-blue-500 hover:bg-blue-600 text-white"
                  >
                    Sign Up
                  </Button>
                </>
              )}
            </div>
          </div>
        )}
      </div>
    </nav>
  );
}



////////////



import { createContext, useContext, ReactNode, useState, useEffect } from 'react';
import { login, register, logout, User } from '../lib/api';
import { toast } from 'sonner';

interface AuthContextType {
  user: User | null;
  isAuthenticated: boolean;
  login: (email: string, password: string) => Promise<void>;
  register: (email: string, password: string, name: string) => Promise<void>;
  logout: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

interface AuthProviderProps {
  children: ReactNode;
}

export function AuthProvider({ children }: AuthProviderProps) {
  const [user, setUser] = useState<User | null>(null);
  const [isAuthenticated, setIsAuthenticated] = useState(false);

  useEffect(() => {
    const token = localStorage.getItem("token");
    if (token) {
      setIsAuthenticated(true);
      // Optionally verify token with backend
    }
  }, []);

  const handleLogin = async (email: string, password: string) => {
    try {
      const { user } = await login(email, password);
      setUser(user);
      setIsAuthenticated(true);
      toast.success("Logged in successfully!");
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : "An unknown error occurred.";
      toast.error(errorMessage);
    }
  };

  const handleRegister = async (email: string, password: string, name: string) => {
    try {
      const { user } = await register(email, password, name);
      setUser(user);
      setIsAuthenticated(true);
      toast.success("Registered successfully!");
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : "An unknown error occurred.";
      toast.error(errorMessage);
    }
  };

  const handleLogout = async () => {
    try {
      await logout();
      setUser(null);
      setIsAuthenticated(false);
      toast.success("Logged out successfully!");
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : "An unknown error occurred.";
      toast.error(errorMessage);
    }
  };

  return (
    <AuthContext.Provider
      value={{
        user,
        isAuthenticated,
        login: handleLogin,
        logout: handleLogout,
        register: handleRegister,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
}


///////////



import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../context/AuthContext";
import { Button } from "./ui/button";
import { Input } from "./ui/input";
import { Label } from "./ui/label";
import { Card, CardContent, CardHeader, CardTitle } from "./ui/card";
import { toast } from "sonner";

export default function SignInForm() {
  const [email, setEmail] = useState<string>("");
  const [password, setPassword] = useState<string>("");
  const [loading, setLoading] = useState(false);
  const { login } = useAuth();
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    try {
      await login(email, password);
      navigate("/dashboard");
    } catch (error) {
      // AuthContext already handles toast.error for login failures
      console.error("Login error:", error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Card className="max-w-md mx-auto mt-12 p-6">
      <CardHeader>
        <CardTitle>Sign In</CardTitle>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <Label htmlFor="email">Email</Label>
            <Input
              id="email"
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              placeholder="Enter email"
            />
          </div>
          <div>
            <Label htmlFor="password">Password</Label>
            <Input
              id="password"
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              placeholder="Enter password"
            />
          </div>
          <Button type="submit" className="w-full" disabled={loading}>
            {loading ? "Logging In..." : "Sign In"}
          </Button>
        </form>
        <p className="mt-4 text-center text-sm">
          Sign up here{" "}
          <button
            onClick={() => navigate("/signup")}
            className="text-blue-500 hover:underline"
          >
            Sign Up
          </button>
        </p>
      </CardContent>
    </Card>
  );
}


/////



import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../context/AuthContext";
import { Button } from "./ui/button";
import { Input } from "./ui/input";
import { Label } from "./ui/label";
import { Card, CardContent, CardHeader, CardTitle } from "./ui/card";
import { toast } from "sonner";

export default function SignUpForm() {
  const [email, setEmail] = useState<string>("");
  const [password, setPassword] = useState<string>("");
  const [name, setName] = useState<string>("");
  const [loading, setLoading] = useState(false);
  const { register } = useAuth();
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    try {
      await register(email, password, name);
      toast.success("Registered successfully!");
      navigate("/dashboard");
    } catch (error) {
      console.error("Registration error:", error);
    } finally {
      setLoading(false);
    }
  };

  return (
    <Card className="max-w-md mx-auto mt-12 p-6">
      <CardHeader>
        <CardTitle>Sign Up</CardTitle>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <Label htmlFor="name">Name</Label>
            <Input
              id="name"
              value={name}
              onChange={(e) => setName(e.target.value)}
              placeholder="Enter name"
            />
          </div>
          <div>
            <Label htmlFor="email">Email</Label>
            <Input
              id="email"
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              placeholder="Enter email"
            />
          </div>
          <div>
            <Label htmlFor="password">Password</Label>
            <Input
              id="password"
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              placeholder="Enter password"
            />
          </div>
          <Button type="submit" className="w-full">
            {loading ? "Signing Up..." : "Sign Up"}
          </Button>
        </form>
        <p className="mt-4 text-center text-sm">
          Sign in here <button
            onClick={() => navigate("/signin")}
            className="text-blue-500 hover:underline"
          >
            Sign In
          </button>
        </p>
      </CardContent>
    </Card>
  );
}

//////////



import { Toaster } from "@/components/ui/toaster";
import { Toaster as Sonner } from "@/components/ui/sonner";
import { TooltipProvider } from "@/components/ui/tooltip";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { BrowserRouter, Routes, Route } from "react-router-dom";
import { ThemeProvider } from "@/components/providers/ThemeProvider";
import { AuthProvider } from "./context/AuthContext"; // Import AuthProvider
import Index from "./pages/Index";
import Dashboard from "./pages/Dashboard";
import Contact from "./pages/Contact";
import Pricing from "./pages/Pricing";
import Reminders from "./pages/Reminders";
import ReminderForm from "./pages/ReminderForm";
import NotFound from "./pages/NotFound";
import AllEvents from "./pages/Allevents";
import EventDetailsPage from "./pages/EventDetails";
import EditEvent from "./pages/EditEvent";
import SignInForm from "./components/SignInForm";
import SignUpForm from "./components/SignUpForm";

const queryClient = new QueryClient();

const App = () => (
  <ThemeProvider defaultTheme="system" storageKey="eventmaster-theme">
    <QueryClientProvider client={queryClient}>
      <TooltipProvider>
        <Toaster />
        <Sonner />
        <AuthProvider> {/* Wrap BrowserRouter with AuthProvider */}
          <BrowserRouter>
            <Routes>
              <Route path="/signin" element={<SignInForm />} />
              <Route path="/signup" element={<SignUpForm />} />
              <Route path="/" element={<Index />} />
              <Route path="/dashboard" element={<Dashboard />} />
              <Route path="/allevents" element={<AllEvents />} /> {/* All events at /all-events */}
              <Route path="/event/:id" element={<EventDetailsPage />} />
              <Route path="/edit-event/:id" element={<EditEvent />} />{" "}
              <Route path="/contact" element={<Contact />} />
              <Route path="/pricing" element={<Pricing />} />
              <Route path="/reminders" element={<Reminders />} />
              <Route path="/reminders/:eventId" element={<ReminderForm />} />
              {/* ADD ALL CUSTOM ROUTES ABOVE THE CATCH-ALL "*" ROUTE */}
              <Route path="*" element={<NotFound />} />
            </Routes>
          </BrowserRouter>
        </AuthProvider>
      </TooltipProvider>
    </QueryClientProvider>
  </ThemeProvider>
);

export default App;


//



import axios from "axios";
import { toast } from "sonner";

const api = axios.create({
  baseURL: import.meta.env.VITE_REACT_APP_API_URL || "http://localhost:5000",
  headers: { "Content-Type": "application/json" },
});

api.interceptors.request.use((config) => {
  const token = localStorage.getItem("token");
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
  return config;
});

export interface User {
  id: string;
  email: string;
  name: string;
}

export interface LoginResponse {
  token: string;
  user: User;
}

export const login = async (email: string, password: string): Promise<LoginResponse> => {
  try {
    const response = await api.post("/api/auth/login", { email, password });
    localStorage.setItem("token", response.data.token);
    return response.data;
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : "Login failed. Please try again.";
    toast.error(errorMessage);
    throw error;
  }
};

export const register = async (email: string, password: string, name: string): Promise<LoginResponse> => {
  try {
    const response = await api.post("/api/auth/register", { email, password, name }); // Added 'name' to the payload
    localStorage.setItem("token", response.data.token);
    return response.data;
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : "Registration failed. Please try again.";
    toast.error(errorMessage);
    throw error;
  }
};

export const logout = async (): Promise<void> => {
  try {
    await api.post("/api/auth/logout");
    localStorage.removeItem("token");
    toast.success("Logged out successfully");
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : "Logout failed. Please try again.";
    toast.error(errorMessage);
    throw error;
  }
};

export const fetchEvents = async () => {
  try {
    const response = await api.get("/api/events");
    return response.data;
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : "Failed to fetch events.";
    toast.error(errorMessage);
    throw error;
  }
};
